Sum of n numbers




.text
addi x10, x0, 4
jal x1, addAP
beq x0, x0, exit
addAP:
addi x2, x2, -8
sw x1 4(x2)
sw x10, 0(x2)
addi x5, x10, -1
bge x5, x0, L1
addi x10, x0, 0
jalr x0, x1, 0
L1:
addi x10, x10, -1 
jal x1, addAP
addi x6, x10, 0
lw x10 0(x2)
lw x1 4(x2)
addi x2 x2 8
add x10 x10 x6
jalr x0 x1 0


exit:
add x0 x0 x0


































Fibonacci




ADD x1 x0 x0
ADDI x2 x0 1
ADDI x3 x0 12
ADD x4 x0 x0
BEQZ x3 .label
ADDI x5 x5 2

.LOOP:
BGT x5 x3 .EXIT
ADD x4 x1 x2

SUB x1 x1 x1
ADDI x1 x2 0

SUB x2 x2 x2
ADDI x2 x4 0

ADDI x5 x5 1 
BEQZ x0 .LOOP

.label:
ADD x2, x2, x1

.EXIT:
































Bubble sort






#N
addi x3 x0 4


#seed
addi x5 x0 164


#x8 = x3 * 4 
slli x8 x3 2


#x29 = 0 
add x29 x0 x0






#pointer to starting position of first array 
lui x4 0x0
#x31 = starting position of first Array
add x31 x31 x4


#pointer to starting position of second array 
lui x4 0x0
addi x4 x4 100
#x30 = starting position of second Array
add x30 x30 x4








.MAIN_LOOP:
#GO TO .random (TAKE RETURNED VALUE IN x10)
#x1 = RETURN ADDRESS
jal x1 .random
#STORE x10 value in mem(x31 + 0)
sw x10 0(x31)
#STORE x10 value in mem(x30 + 0)
sw x10 0(x30)
#x31 = x31 + 4
addi x31 x31 4
#x30 = x30 + 4
addi x30 x30 4
#x29 = x29 + 1
addi x29 x29 1
#x29 < x3 MAIN_LOOP 
blt x29 x3 .MAIN_LOOP
#OTHERWISE GO in bubbleSort


#before CALLING bubbleSort


#may be redundant 
add x29 x0 x0


#save the last address of the second array (LOOP1)
add x9 x30 x0


#save the last address of the second array (LOOP2)
add x18 x30 x0


#make the second array point to start again
sub x30 x30 x8
#x6 = pointer to the start of the second array 
add x6 x0 x4
#x7 = pointer to the start of the second array 
add x7 x0 x4


jal x0 .bubbleSort












.bubbleSort:
#x4 = pointer to the start of the second array 
add x4 x0 x30


#x6 = LOOP1 ITERATOR 
#x7 = LOOP2 ITERATOR 


.LOOP1:
#if x6 >= x9 EXIT 
bge x6 x9 .EXIT


#INITIALIZE x7 = x30
add x7 x30 x0


#INCREMENT x6 FOR FURTHER LOOP 1 
addi x6 x6 4


#subtract 4 from last address of second array of loop 2
addi x18 x18 -4


#OTHERWISE GO TO LOOP 2
jal x0 .LOOP2


.LOOP2:
#if x7 >= x18 EXIT LOOP 2
bge x7 x18 .LOOP1
#x10 <- x7
add x10 x0 x7
#x11 <- x10 + 4 
addi x11 x10 4


#INCREMENT x7
addi x7 x7 4


#store return address
jal x1 .SWAPPER


.SWAPPER:
#x26 <- mem[x10]
lw x26 0(x10)
#x27 <- mem[x11]
lw x27 0(x11)


#if mem(x11) < mem(x10) swap
blt x27 x26 .SWAP


#JUMP AGAIN TO LOOP 2
jal x0 .LOOP2


#EXIT THE PROGRAM
jal x0 .EXIT


.random:
#x6 = seed
addi x6 x5 0
#x7 = 0
add x7 x0 x0
#x10 = 0
add x10 x0 x0
#x7 = x6<<21
slli x7 x6 21
#x10 = x7 ^ x6
xor x10 x7 x6


#x7 = x10
add x7 x10 x0
#x6 = x10
add x6 x10 x0
#x7 = x7 >>> 35
srli x7 x7 31
srli x7 x7 4
#x10 = x7 ^ x6
xor x10 x7 x6


#x7 = x10
add x7 x10 x0
#x6 = x10
add x6 x10 x0
#x7 = x7 << 4
slli x7 x7 4
#x10 = x7 ^ x6
xor x10 x7 x6


#seed = x10
addi x5 x10 0
#RETURN TO CALLER
jalr x0 0(x1)






.SWAP:
# i = x10 , j = x11


#x28 = mem(A[i])
lw x28 0(x10)
#x29 = mem(A[j])
lw x29 0(x11)


#mem(A[i]) = x29
sw x29 0(x10)
#mem(A[j]) = x28
sw x28 0(x11)


jalr x0 0(x1)




.EXIT: